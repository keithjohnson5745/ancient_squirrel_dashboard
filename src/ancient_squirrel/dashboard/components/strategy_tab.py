import streamlit as st
import pandas as pd


def render(df, analysis_results: dict | None, nlp_results: dict | None):
    """
    Show high-level “what should we create next?” guidance.

    Parameters
    ----------
    df : pandas.DataFrame
        The merged main dataframe (video-level rows).
    analysis_results : dict | None
        Parsed content of  output/analysis_results.json
        – may include "cluster_insights".
    nlp_results : dict | None
        Parsed content of  output/nlp_analysis_results.json
        – may include "llm_insights".
    """

    st.header("📈  Content-strategy insights")

    # --------------------------------------------------------------
    # 1 · Viewer-intent snippets (from cluster_insights)
    # --------------------------------------------------------------
    insights = (analysis_results or {}).get("cluster_insights", {})

    if insights:
        st.subheader("Viewer intent by top clusters")
        for cid, blob in insights.items():
            intent = blob.get("viewer_intent")
            if not intent:
                continue  # that cluster was summarised without LLM
            with st.expander(f"Cluster {cid}  —  {blob['size']} videos"):
                st.markdown(f"**Viewer intent**  {intent}")
                st.markdown(
                    "**Key ideas:** " + ", ".join(blob.get("key_ideas", [])[:5])
                )
                st.markdown(
                    "**Top channels (by influence):** "
                    + ", ".join(ch for ch, _ in blob.get("top_channels_by_influence", []))
                )
    else:
        st.info(
            "Run the pipeline with **--enable-cluster-insights "
            "and --llm** to generate viewer-intent summaries."
        )

    # --------------------------------------------------------------
    # 2 · Title-pattern suggestions (from LLM insights block)
    # --------------------------------------------------------------
    llm_insights = (nlp_results or {}).get("llm_insights", {})
    title_patterns = llm_insights.get("title_patterns")

    # Fix for the title patterns display section
    if title_patterns:
        st.subheader("Effective title patterns")
        
        # Handle different data types properly
        try:
            if isinstance(title_patterns, dict):
                # Convert dict to dataframe with keys as index
                patterns_df = pd.DataFrame.from_dict(title_patterns, orient='index', columns=['Value'])
                patterns_df.reset_index(inplace=True)
                patterns_df.columns = ['Pattern', 'Value']
                st.table(patterns_df.head(20))
            elif isinstance(title_patterns, list):
                # Convert list to dataframe with numbered index
                patterns_df = pd.DataFrame({"Pattern": title_patterns})
                st.table(patterns_df.head(20))
            elif isinstance(title_patterns, str):
                # If it's just a string, display as markdown
                st.markdown(title_patterns)
            else:
                # For any other type, convert to string and display
                st.write(str(title_patterns))
        except Exception as e:
            st.error(f"Could not display title patterns: {str(e)}")
            st.write("Raw title patterns data:")
            st.write(title_patterns)
    else:
        st.info("No title-pattern suggestions – they require `--llm`.")

    # --------------------------------------------------------------
    # 3 · Channel-level content ideas
    # --------------------------------------------------------------
    strategy = llm_insights.get("content_strategy")
    if strategy:
        st.subheader("Channel-level guidance")
        st.markdown(strategy.get("summary", ""))
        st.json(strategy.get("details", {}), expanded=False)
    else:
        st.info("No content-strategy block generated by the LLM.")
